                            **Problem 1: Slice Basics**
Write a Go program that declares a slice of integers, appends values to it, 
and prints the slice's length, capacity, and elements.


                            **Problem 2: Slicing**
Create a program that takes a slice of integers, slices it to create a new slice, 
and then prints the new slice. Experiment with different slices, including both simple slices and slices of slices.


                            **Problem 3: Copy Slices**
Write a Go program that copies the elements from one slice to another. Ensure that 
the original slice remains unchanged.


                            **Problem 4: Reverse a Slice**
Create a function that takes a slice of integers as an argument and returns a new 
slice with the elements reversed. For example, if the input is `[1, 2, 3, 4]`, the output should be `[4, 3, 2, 1]`.


                            **Problem 5: Find the Smallest Element**
Write a function that takes a slice of integers and returns the smallest element in 
the slice. If the slice is empty, return an error or a suitable message.


                            **Problem 6: Remove Duplicates**
Create a function that takes a slice of strings and removes any duplicate elements,
 returning a slice with only the unique values.


                            **Problem 7: Merge Slices**
Write a Go program that merges two slices of integers into a single slice and sorts the 
merged slice in ascending order.


                            **Problem 8: Find Common Elements**
Create a function that takes two slices of integers and returns a new slice containing only 
the elements that are common to both input slices.


                            **Problem 9: Largest Subarray Sum**
Write a function that takes a slice of integers and finds the subarray with the largest sum. 
Return the sum and the subarray itself.


                            **Problem 10: Rotating a Slice**                                          
Develop a function that takes a slice of integers and an integer 'k' as arguments and rotates 
the slice to the right by 'k' positions. For example, 
if the input is `[1, 2, 3, 4, 5]` and 'k' is 2, the output should be `[4, 5, 1, 2, 3]`.
These problems cover a range of topics related to slices in Go and will help you become more
 proficient in working with this fundamental data structure. Good luck with your practice!
